<?php
// $Id$

/**
 * @file
 * Loisform module submission tests.
 */

include_once(dirname(__FILE__) . '/loisform.test');

class LoisformSubmissionTestCase extends LoisformTestCase {
  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Loisform submission'),
      'description' => t('Submits a sample loisform and checks the database integrity.'),
      'group' => t('Loisform'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp();
  }

  /**
   * Implementation of tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }

  /**
   * Test sending a submission and check database integrity.
   */
  function testLoisformSubmission() {
    $this->drupalLogin($this->loisform_users['admin']);
    $this->loisformReset();
    $this->loisformSubmissionExecute('sample');
    $this->drupalLogout();
  }

  function testLoisformSubmissionDefault() {
    $this->drupalLogin($this->loisform_users['admin']);
    $this->loisformReset();
    $this->loisformSubmissionExecute('default');
    $this->drupalLogout();
  }

  /**
   * Execute the submission test.
   *
   * @param $value_type
   *   The values to be submitted to the loisform. Either "sample" or "default".
   */
  function loisformSubmissionExecute($value_type = 'sample') {
    $path = drupal_get_path('module', 'loisform');
    module_load_include('inc', 'loisform', 'includes/loisform.submissions');

    // Create a new Loisform test node.
    $node = $this->testLoisformForm();
    $submission_values = $value_type == 'sample' ? $this->testLoisformPost() : array();

    // Visit the node page with the "foo=bar" query, to test %get[] default values.
    $this->drupalGet('node/' . $node->nid, array('query' => 'foo=bar'));
    $this->assertText($node->body, t('Loisform node created and accessible at !url', array('!url' => 'node/' . $node->nid)), t('Loisform'));

    // Submit our test data.
    $this->drupalPost(NULL, $submission_values, 'Submit');

    // Confirm that the submission has been created.
    $this->assertText($node->loisform['confirmation'], t('Confirmation message "@confirmation" received.', array('@confirmation' => $node->loisform['confirmation'])), t('Loisform'));

    // Get the SID of the new submission.
    $matches = array();
    preg_match('/sid=([0-9]+)/', $this->getUrl(), $matches);
    $sid = $matches[1];

    // Pull in the database submission and check the values.
    $actual_submission = loisform_get_submission($node->nid, $sid, TRUE);

    $component_info = $this->testLoisformComponents();
    foreach ($node->loisform['components'] as $cid => $component) {
      $stable_value = $value_type == 'sample' ? $component_info[$component['form_key']]['database values'] : $component_info[$component['form_key']]['database default values'];
      $actual_value = $actual_submission->data[$cid]['value'];
      $result = $this->assertEqual($stable_value, $actual_value, t('Component @form_key data integrity check', array('@form_key' => $component['form_key'])), t('Loisform'));
      if (!$result || $result === 'fail') {
        $this->fail(t('Expected !expected', array('!expected' => print_r($stable_value, TRUE))) . "\n\n" . t('Recieved !recieved', array('!recieved' => print_r($actual_value, TRUE))), t('Loisform'));
      }
    }
  }

}
